// <auto-generated />
using System;
using DocsReports.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DocsReports.Migrations
{
    [DbContext(typeof(DocsReportsContext))]
    [Migration("20210927022324_DocsReportsMigrationTables")]
    partial class DocsReportsMigrationTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DocsReports.Models.Branches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripton")
                        .HasColumnName("descripton")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("DocsReports.Models.DocCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("DocCategories");
                });

            modelBuilder.Entity("DocsReports.Models.Documents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArchiveId")
                        .HasColumnName("archiveId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadd")
                        .HasColumnName("dateadd")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("DocCategoryId")
                        .HasColumnName("docCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeSend")
                        .HasColumnName("employeeSend")
                        .HasColumnType("int");

                    b.Property<int?>("EployeeSent")
                        .HasColumnName("eployeeSent")
                        .HasColumnType("int");

                    b.Property<int?>("PageCount")
                        .HasColumnName("pageCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("DocCategoryId");

                    b.HasIndex("EmployeeSend");

                    b.HasIndex("EployeeSent");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DocsReports.Models.Employees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("branchId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .HasColumnName("fullName")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.Property<int?>("PostionId")
                        .HasColumnName("postionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("PostionId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DocsReports.Models.Positions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("positions");
                });

            modelBuilder.Entity("DocsReports.Models.ReportCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ReportCategories");
                });

            modelBuilder.Entity("DocsReports.Models.Reports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArchiveId")
                        .HasColumnName("archiveId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadd")
                        .HasColumnName("dateadd")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("EmployeeReceipt")
                        .HasColumnName("employeeReceipt")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeSend")
                        .HasColumnName("employeeSend")
                        .HasColumnType("int");

                    b.Property<int?>("PageCount")
                        .HasColumnName("pageCount")
                        .HasColumnType("int");

                    b.Property<int?>("ReportCategoryId")
                        .HasColumnName("reportCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeReceipt");

                    b.HasIndex("EmployeeSend");

                    b.HasIndex("ReportCategoryId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DocsReports.Models.Documents", b =>
                {
                    b.HasOne("DocsReports.Models.DocCategories", "DocCategory")
                        .WithMany("Documents")
                        .HasForeignKey("DocCategoryId")
                        .HasConstraintName("FK_Documents_DocCategories_id");

                    b.HasOne("DocsReports.Models.Employees", "EmployeeSendNavigation")
                        .WithMany("DocumentsEmployeeSendNavigation")
                        .HasForeignKey("EmployeeSend")
                        .HasConstraintName("FK_Documents_Employees_id");

                    b.HasOne("DocsReports.Models.Employees", "EployeeSentNavigation")
                        .WithMany("DocumentsEployeeSentNavigation")
                        .HasForeignKey("EployeeSent")
                        .HasConstraintName("FK_Documents_Employees_id_1");
                });

            modelBuilder.Entity("DocsReports.Models.Employees", b =>
                {
                    b.HasOne("DocsReports.Models.Branches", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Employees_Branches_id");

                    b.HasOne("DocsReports.Models.Positions", "Postion")
                        .WithMany("Employees")
                        .HasForeignKey("PostionId")
                        .HasConstraintName("FK_Employees_positions_id");
                });

            modelBuilder.Entity("DocsReports.Models.Reports", b =>
                {
                    b.HasOne("DocsReports.Models.Employees", "EmployeeReceiptNavigation")
                        .WithMany("ReportsEmployeeReceiptNavigation")
                        .HasForeignKey("EmployeeReceipt")
                        .HasConstraintName("FK_Reports_Employees_id_1");

                    b.HasOne("DocsReports.Models.Employees", "EmployeeSendNavigation")
                        .WithMany("ReportsEmployeeSendNavigation")
                        .HasForeignKey("EmployeeSend")
                        .HasConstraintName("FK_Reports_Employees_id");

                    b.HasOne("DocsReports.Models.ReportCategories", "ReportCategory")
                        .WithMany("Reports")
                        .HasForeignKey("ReportCategoryId")
                        .HasConstraintName("FK_Reports_ReportCategories_id");
                });
#pragma warning restore 612, 618
        }
    }
}
